# Swapfile Hibernation
/*
  - Configures a swapfile for hibernation
*/
{ config, lib, utils, pkgs, ... }:
  let
    cfg = config.system.hibernation;
  in {

    options = {
      system.hibernation = {

        enable = lib.mkEnableOption ''
          Enables the setup for hibernation.
        '';

        resumeDevice = lib.mkOption {
          type = lib.types.str;
          description = ''
            The device for resume.
          '';
        };

        swapfilePath = lib.mkOption {
          type = lib.types.path;
          description = ''
            The path for the swapfile.
          '';
        };

        dataFile = lib.mkOption {
          type = lib.types.submodule {
            options = {
              systemUser = lib.mkOption {
                type = lib.types.str;
                description = "The system user to own the file.";
                default = "root";
              };
              absolutePath = lib.mkOption {
                type = lib.types.path;
                description = "The absolute path to the file.";
              };
              storePath = lib.mkOption {
                type = lib.types.path;
                description = "The relative path to the file.";
              };
            };
          };
          description = ''
            A file to carry hardware information.

            Generated by a service, it's used to inform nix about the swapfile's 'resume_offset'.
          '';
        };

      };
    };

    config = lib.mkIf (cfg.enable) {

      assertions = [
        {
          assertion = !(cfg.resumeDevice == "");
          message = ''
            The option 'system.hibernation.resumeDevice' cannot be empty
          '';
        }
        {
          assertion = !(cfg.swapfilePath == "");
          message = ''
            The option 'system.hibernation.swapfilePath' cannot be empty
          '';
        }
        {
          assertion = !(cfg.dataFile.absolutePath == "");
          message = ''
            The option 'system.hibernation.dataFile.absolutePath' cannot be empty
          '';
        }
        {
          assertion = !(cfg.dataFile.storePath == "");
          message = ''
            The option 'system.hibernation.dataFile.storePath' cannot be empty
          '';
        }
      ];

      # Find and save "resume_offset"
      systemd.services."find-swapfile-resume_offset" = {
        serviceConfig.Type = "oneshot";
        serviceConfig.User = "root"; # filefrag swapfile requires root access
        after = ( # From "https://github.com/NixOS/nixpkgs/blob/master/nixos/modules/config/swap.nix"
          let
            deviceName = lib.replaceStrings [ "\\" ] [ "" ] (utils.escapeSystemdPath cfg.swapfilePath);
          in [ "mkswap-${deviceName}.service" ]
        );
        before = [ "shutdown.target" ];
        conflicts = [ "shutdown.target" ];
        path = with pkgs; [
          coreutils
          e2fsprogs # filefrag
          gawk # awk
          jq # JQ: Simple JSON formatter
        ];
        script = ''
          if [ -f "${cfg.swapfilePath}" ]; then
            # Finds the value of resume_offset
            resume_offset=$( \
              filefrag -v "${cfg.swapfilePath}" \
              | awk '$1=="0:" {print substr($4, 1, length($4)-2)}' \
            )
            # Saves the value into a json file
            if [ -f "${cfg.dataFile.absolutePath}" ]; then
              # Edits a json file
              ( jq \
                --arg offset "$resume_offset" \
                '.hibernation.swapfile.resume_offset = $offset' \
                "${cfg.dataFile.absolutePath}" \
              ) > "${cfg.dataFile.absolutePath}.tmp" \
                && mv "${cfg.dataFile.absolutePath}.tmp" "${cfg.dataFile.absolutePath}"
            else
              # Creates a json file
              ( jq -n \
                --arg offset "$resume_offset" \
                '{ hibernation: { swapfile: { resume_offset: $offset } } }' \
              ) > "${cfg.dataFile.absolutePath}"
            fi
            # Set "systemUser" as the owner (And the group)
            chown ${cfg.dataFile.systemUser}: "${cfg.dataFile.absolutePath}"
          fi
        '';
      };

      # Hibernation
      # Note: The file is only available AFTER the first rebuild!
      #   Actually setting "resume_offset" requires another rebuild!
      boot.resumeDevice = cfg.resumeDevice;
      boot.kernelParams = lib.mkIf (builtins.pathExists cfg.dataFile.storePath) (
        let
          offset = (
            builtins.fromJSON (builtins.readFile cfg.dataFile.storePath)
          )."hibernation"."swapfile"."resume_offset";
        in  [ "resume_offset=${offset}" ]
      );
      # Note: If everything works, then "/sys/power/resume_offset" should be populated

    };
  }
